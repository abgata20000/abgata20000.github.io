<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | AB Lab]]></title>
  <link href="http://blog.abgata.org/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.abgata.org/"/>
  <updated>2014-05-03T10:41:07+09:00</updated>
  <id>http://blog.abgata.org/</id>
  <author>
    <name><![CDATA[abgata20000]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[wheneverでRailsのタスクをcronで実行する]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/whenever/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/whenever</id>
    <content type="html"><![CDATA[<h3>参考サイト</h3>

<ul>
<li><a href="http://higelog.brassworks.jp/?p=1548">WheneverでRailsのバッチ処理</a></li>
</ul>

<h2>登録内容の確認</h2>
<div class="highlight"><pre><code class="text">bundle exec whenever
</code></pre></div>
<p>を実行するとcrontabの内容をコンソール出力。
この時点ではまだcrontabに登録されてはいない。</p>

<h2>Crontabへ登録</h2>
<div class="highlight"><pre><code class="text">bundle exec whenever --update-crontab
</code></pre></div>
<p>–update-crontabオプションをつけるとcrontabに登録する。
Whenever以外で登録されていたジョブが上書きされることはない。</p>

<h2>Crontabから削除</h2>
<div class="highlight"><pre><code class="text">bundle exec whenever --clear-crontab
</code></pre></div>
<p>Cronを止めたい場合は–clear-crontabですべて削除。
登録の場合と同様にWhenever管理外のジョブが削除されることはない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsをrunicornで起動]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/rails_unicorn/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/rails_unicorn</id>
    <content type="html"><![CDATA[<h2>起動</h2>
<div class="highlight"><pre><code class="text">unicorn -c config/unicorn.rb -D
</code></pre></div>
<h2>現在実行中のプロセスを探す</h2>
<div class="highlight"><pre><code class="text">ps ax | grep unicorn
</code></pre></div>
<h2>停止</h2>
<div class="highlight"><pre><code class="text">kill process_id
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでtaskを作成]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/rails_task/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/rails_task</id>
    <content type="html"><![CDATA[<h3>参考サイト</h3>

<ul>
<li><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rakeタスクをつくる</a></li>
</ul>

<h2>タスクファイルの作成</h2>
<div class="highlight"><pre><code class="text">rails g task  task_name
</code></pre></div>
<p>lib/task/task_name.rake が作成される</p>

<h5>lib/task/task_name.rake</h5>
<div class="highlight"><pre><code class="text">desc &quot;Sample です&quot; #=&gt; 説明
task :sample =&gt; :environment do
    print &#39;hello sample.&#39;
end
</code></pre></div>
<h2>実行</h2>
<div class="highlight"><pre><code class="text">rake task_name:sample
</code></pre></div>
<h2>確認</h2>
<div class="highlight"><pre><code class="text">rake -vT
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsのデーモン化ツールpm2をインストール]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/pm2_install/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/pm2_install</id>
    <content type="html"><![CDATA[<h2>npmでグローバルにインストール</h2>
<div class="highlight"><pre><code class="text">npm install -g pm2
</code></pre></div>
<h2>スクリプトを登録</h2>
<div class="highlight"><pre><code class="text">pm2 start sample001.js
</code></pre></div>
<h2>スクリプトを確認</h2>
<div class="highlight"><pre><code class="text">pm2 list
</code></pre></div>
<h2>スクリプトを止める</h2>
<div class="highlight"><pre><code class="text"># listで確認して、appで登録されたスクリプトを止めたい場合
pm2 stop app
</code></pre></div>
<h2>ログを参照</h2>
<div class="highlight"><pre><code class="text">pm2 logs
</code></pre></div>
<h2>モニタリング</h2>
<div class="highlight"><pre><code class="text">pm2 monit
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grape を Rails4で利用する場合の注意点]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/grape_on_rails/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/grape_on_rails</id>
    <content type="html"><![CDATA[<h3>参考サイト</h3>

<ul>
<li><a href="http://lemonade.hatenablog.jp/entry/2013/11/28/031126">grape on railsしてみる</a></li>
</ul>

<p>なんかいろいろとはまってしまったので備忘録</p>

<p>file pathを追加する</p>

<h5>config/application.rb</h5>
<div class="highlight"><pre><code class="text">module TestApp
  class Application &lt; Rails::Application
    ...
    config.paths.add &quot;app/api&quot;, glob: &quot;**/*.rb&quot;
    config.autoload_paths += Dir[&quot;#{Rails.root}/app/api/*&quot;]
    ...
  end
end
routes.rbにmountするコードを一行追加

TestApp::Application.routes.draw do
  mount TestAPI =&gt; &#39;api&#39;
  ...
end
</code></pre></div>
<h3>流れ</h3>
<div class="highlight"><pre><code class="text">$ rails new test-app
$ cd test-app
$ vi Gemfile
# + gem &#39;grape&#39;, :git =&gt; &quot;https://github.com/intridea/grape.git&quot;
$ bundle install
$ mkdir app/api
$ vi app/api/test_api.rb
$ vi app/api/api_v1.rb
$ mkdir app/api/v1
$ vi app/api/ping.rb
$ vi config/application.rb
$ vi config/routes.rb
$ bundle exec rails s
$ open http://localhost:3000/api/v1/hello
files
</code></pre></div>
<h5>app/api/test_api.rb</h5>
<div class="highlight"><pre><code class="text">class TestAPI &lt; Grape::API
  mount API_V1
end
</code></pre></div>
<h5>app/api/api_v1.rb</h5>

<p>v1/以下のclassをmountする</p>
<div class="highlight"><pre><code class="text">class API_V1 &lt; Grape::API
  prefix &#39;v1&#39; # とりあえずprefixだけつけている
  mount V1::Ping
end
</code></pre></div>
<h5>app/api/v1/ping.rb</h5>
<div class="highlight"><pre><code class="text">module V1
  class Ping &lt; Grape::API
    format :json

    get :hello do
      {hello: &quot;world&quot;}
    end
  end
end
</code></pre></div>
<p>ベースのクラスをモジュールで囲うと何故かサブクラス呼び出せない</p>

<p>不思議だ。</p>

<p>要調査</p>
]]></content>
  </entry>
  
</feed>
