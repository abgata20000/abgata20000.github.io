<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | AB Lab]]></title>
  <link href="http://blog.abgata.org/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.abgata.org/"/>
  <updated>2014-05-27T10:08:44+09:00</updated>
  <id>http://blog.abgata.org/</id>
  <author>
    <name><![CDATA[abgata20000]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsのScaffoldのテンプレートをカスタマイズする]]></title>
    <link href="http://blog.abgata.org/blog/2014/05/27/rails_scaffold_template/"/>
    <updated>2014-05-27T17:50:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/05/27/rails_scaffold_template</id>
    <content type="html"><![CDATA[<h2>Scaffoldで生成されるテンプレートをSlimに変更する</h2>

<p>Railsの<strong>Scaffold</strong>を使う際にテンプレートを<strong>slim</strong>で、</p>

<p>生成してさらに中身をカスタマイズできるようにしたくなったのでいろいろ調べてみました。</p>

<p>テンプレートエンジンを<strong>slim</strong>に変更するのは、簡単そうです。</p>

<p>Gemfileに <code>gem &#39;slim-rails&#39;</code> を追加して <code>bundle install</code> を実行して、</p>

<p><code>config/application.rb</code>に</p>
<div class="highlight"><pre><code class="text">config.generators do |g|
  g.template_engine :slim
end
</code></pre></div>
<p>を追加するだけで出来ました。</p>

<p><img src="https://abgata.s3-ap-northeast-1.amazonaws.com/6447d37569b96333c8981ebcab978d70.png" alt="img"></p>

<h2>さらに、これの中身をカスタマイズしたい</h2>

<p>参考サイト: <a href="http://qiita.com/labocho/items/387e7592b8e388fd9ca5">rails g scaffold のカスタマイズ</a></p>

<p>現在利用しているテンプレートのコピーを作成します</p>
<div class="highlight"><pre><code class="text">rake rails:templates:copy
</code></pre></div>
<p>これで <code>lib/templates</code> が生成されます</p>

<p><code>lib/template/scaffold</code> 作成して、</p>

<p><code>index.html.erb</code> などのテンプレートファイルを作成すれば</p>

<p><code>rails g scaffold</code> 時に反映されるようです。</p>

<h3>テンプレートのカスタマイズもSlimで書きたい</h3>

<p>デフォルトでは、テンプレートエンジンは <code>erb</code> になっています。</p>

<p>このままでも良かったのですが、折角なので、</p>

<p>テンプレートのカスタマイズも<strong>slim</strong>で出来るようにしました。</p>
<div class="highlight"><pre><code class="text">rails g generator slim/scaffold
</code></pre></div>
<p>で、<code>lib/generators/slim/scaffold</code> が生成されます。</p>

<p>生成されたフォルダ内の</p>

<p><code>scaffold_generator.rb</code></p>

<p>を編集します。</p>

<h5>scaffold_generator.rb</h5>
<div class="highlight"><pre><code class="text">require &quot;rails/generators/erb/scaffold/scaffold_generator&quot;
class Slim::ScaffoldGenerator &lt; Erb::Generators::ScaffoldGenerator
  source_root File.expand_path(&#39;../templates&#39;, __FILE__)

  protected
  def handler
    :slim
  end
end
</code></pre></div>
<p>これで、scaffold時に <code>lib/generators/slim/scaffold/template</code> 内のファイルが利用されるようになります。</p>

<h5>index.html.slim</h5>
<div class="highlight"><pre><code class="text">h1
  | &lt;%= plural_table_name %&gt;

table class=(&quot;table table-boderd table-striped table-hover&quot;)
  thead
    tr
&lt;% attributes.reject(&amp;:password_digest?).each do |attribute| -%&gt;
      th &lt;%= attribute.human_name %&gt;
&lt;% end -%&gt;
      th
      th
      th

  tbody
    - @&lt;%= plural_table_name %&gt;.each do |&lt;%= singular_table_name %&gt;|
      tr
&lt;% attributes.reject(&amp;:password_digest?).each do |attribute| -%&gt;
        td= &lt;%= singular_table_name %&gt;.&lt;%= attribute.name %&gt;
&lt;% end -%&gt;
        td= link_to &#39;Show&#39;, &lt;%= singular_table_name %&gt;, :class =&gt; &#39;btn btn-info&#39;
        td= link_to &#39;Edit&#39;, edit_&lt;%= singular_table_name %&gt;_path(&lt;%= singular_table_name %&gt;), :class =&gt; &#39;btn btn-success&#39;
        td
          = link_to(&#39;Destroy&#39;,
            &lt;%= singular_table_name %&gt;,
            method: :delete,
            :remote =&gt; true,
            :onclick =&gt; &#39;if(window.confirm(&quot;are you sure?&quot;)){$(this).closest(&quot;tr&quot;).fadeOut()}&#39;,
            data: {},
            :class =&gt; &#39;btn btn-danger&#39;)
</code></pre></div>
<p>こんな感じですね。</p>

<p>ちょっとハマったのは、</p>
<div class="highlight"><pre><code class="text">&lt;% attributes.reject(&amp;:password_digest?).each do |attribute| -%&gt;
      th &lt;%= attribute.human_name %&gt;
&lt;% end -%&gt;
</code></pre></div>
<p>のようなscaffold時に生成される箇所にインデントがあると、</p>

<p>生成されたslimファイルのインデントがおかしくなるという点です。</p>
<div class="highlight"><pre><code class="text">tbody
  - @&lt;%= plural_table_name %&gt;.each do |&lt;%= singular_table_name %&gt;|
    tr
      &lt;% attributes.reject(&amp;:password_digest?).each do |attribute| -%&gt;
      td= &lt;%= singular_table_name %&gt;.&lt;%= attribute.name %&gt;
      &lt;% end -%&gt;
</code></pre></div>
<p>のように記述すると</p>
<div class="highlight"><pre><code class="text">tr
    td
</code></pre></div>
<p>とインデントが余分に入ってしまいました。</p>

<h2>折角なのでcontrollerとmodelもカスタマイズする</h2>

<p>controllerは、<code>lib/templates/rails/scaffold_controller/controller.rb</code>を編集すればいいようです。</p>

<p>このファイルは、最初に実行した</p>
<div class="highlight"><pre><code class="text">rake rails:templates:copy
</code></pre></div>
<p>で生成されていました。</p>

<p>modelは、<code>lib/templates/active_record/model/model.rb</code>を作成する必要があります。</p>

<p>サンプルは、</p>

<h5>ruby:model.rb</h5>
<div class="highlight"><pre><code class="text">&lt;% module_namespacing do -%&gt;
class &lt;%= class_name %&gt; &lt; &lt;%= parent_class_name.classify %&gt;
&lt;% attributes.select {|attr| attr.reference? }.each do |attribute| -%&gt;
  belongs_to :&lt;%= attribute.name %&gt;&lt;%= &#39;, polymorphic: true&#39; if attribute.polymorphic? %&gt;
&lt;% end -%&gt;
&lt;% if !accessible_attributes.empty? -%&gt;
  # attr_accessible &lt;%= accessible_attributes.map {|a| &quot;:#{a.name}&quot; }.sort.join(&#39;, &#39;) %&gt;
&lt;% else -%&gt;
  # attr_accessible :title, :body # rails4 だとエラー出ます
&lt;% end -%&gt;


  def to_s
    &lt;%- if attributes.map{ |a| a.name }.include?(&#39;name&#39;) -%&gt;
    name
    &lt;%- else -%&gt;
    &quot;&lt;%= class_name %&gt; #{id}&quot;
    &lt;%- end -%&gt;
  end

end
&lt;% end -%&gt;
</code></pre></div>
<p>こんな感じです。</p>
<div class="highlight"><pre><code class="text">rails g scaffold sample name comment:text
</code></pre></div>
<p><img src="https://abgata.s3-ap-northeast-1.amazonaws.com/44c06e14945c626cc741f6a04dac0314.png" alt="img"></p>

<p>で生成されるファイルが変更されたのを確認できます。</p>

<p>さて、どんなテンプレートにしようかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wheneverでRailsのタスクをcronで実行する]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/whenever/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/whenever</id>
    <content type="html"><![CDATA[<h3>参考サイト</h3>

<ul>
<li><a href="http://higelog.brassworks.jp/?p=1548">WheneverでRailsのバッチ処理</a></li>
</ul>

<h2>登録内容の確認</h2>
<div class="highlight"><pre><code class="text">bundle exec whenever
</code></pre></div>
<p>を実行するとcrontabの内容をコンソール出力。
この時点ではまだcrontabに登録されてはいない。</p>

<h2>Crontabへ登録</h2>
<div class="highlight"><pre><code class="text">bundle exec whenever --update-crontab
</code></pre></div>
<p>–update-crontabオプションをつけるとcrontabに登録する。
Whenever以外で登録されていたジョブが上書きされることはない。</p>

<h2>Crontabから削除</h2>
<div class="highlight"><pre><code class="text">bundle exec whenever --clear-crontab
</code></pre></div>
<p>Cronを止めたい場合は–clear-crontabですべて削除。
登録の場合と同様にWhenever管理外のジョブが削除されることはない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsをrunicornで起動]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/rails_unicorn/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/rails_unicorn</id>
    <content type="html"><![CDATA[<h2>起動</h2>
<div class="highlight"><pre><code class="text">unicorn -c config/unicorn.rb -D
</code></pre></div>
<h2>現在実行中のプロセスを探す</h2>
<div class="highlight"><pre><code class="text">ps ax | grep unicorn
</code></pre></div>
<h2>停止</h2>
<div class="highlight"><pre><code class="text">kill process_id
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでtaskを作成]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/rails_task/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/rails_task</id>
    <content type="html"><![CDATA[<h3>参考サイト</h3>

<ul>
<li><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rakeタスクをつくる</a></li>
</ul>

<h2>タスクファイルの作成</h2>
<div class="highlight"><pre><code class="text">rails g task  task_name
</code></pre></div>
<p>lib/task/task_name.rake が作成される</p>

<h5>lib/task/task_name.rake</h5>
<div class="highlight"><pre><code class="text">desc &quot;Sample です&quot; #=&gt; 説明
task :sample =&gt; :environment do
    print &#39;hello sample.&#39;
end
</code></pre></div>
<h2>実行</h2>
<div class="highlight"><pre><code class="text">rake task_name:sample
</code></pre></div>
<h2>確認</h2>
<div class="highlight"><pre><code class="text">rake -vT
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsのデーモン化ツールpm2をインストール]]></title>
    <link href="http://blog.abgata.org/blog/2014/04/28/pm2_install/"/>
    <updated>2014-04-28T09:00:00+09:00</updated>
    <id>http://blog.abgata.org/blog/2014/04/28/pm2_install</id>
    <content type="html"><![CDATA[<h2>npmでグローバルにインストール</h2>
<div class="highlight"><pre><code class="text">npm install -g pm2
</code></pre></div>
<h2>スクリプトを登録</h2>
<div class="highlight"><pre><code class="text">pm2 start sample001.js
</code></pre></div>
<h2>スクリプトを確認</h2>
<div class="highlight"><pre><code class="text">pm2 list
</code></pre></div>
<h2>スクリプトを止める</h2>
<div class="highlight"><pre><code class="text"># listで確認して、appで登録されたスクリプトを止めたい場合
pm2 stop app
</code></pre></div>
<h2>ログを参照</h2>
<div class="highlight"><pre><code class="text">pm2 logs
</code></pre></div>
<h2>モニタリング</h2>
<div class="highlight"><pre><code class="text">pm2 monit
</code></pre></div>]]></content>
  </entry>
  
</feed>
